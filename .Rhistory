names(drugresults[[1]])[c(-1,-44)] = namecode$name[which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])]
# Replace a data.frame coded gene to real gene name
names(drugresults[[1]])[c(-1,-44)]
namecode$name[which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])]
which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])
namecode$Code
namecode$Code %in% names(drugresults[[1]])[c(-1,-44)]
names(drugresults[[1]])[c(-1,-44)]
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])
# Replace a data.frame coded gene to real gene name
names(drugresults[[1]])[c(-1,-44)] = namecode$name[which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])]
names(drugresults[[1]])[c(-1,-44)]
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])
namecode$name[which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])]
namecode$name
str(namecode)
namecode = data.frame(Code = names(CNV_t),name = unlist(CNV[,1]))
str(CNV)
length(names(CNV_t))
names(CNV_t)[24503]
str(CNV_t)
namemodel = data.frame(t(CNV[,1:2]), stringsAsFactors = F)
str(namemodel)
namecode = data.frame(Code = names(namemodel),name = unlist(namemodel[1,]))
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
# Replace a data.frame coded gene to real gene name
names(drugresults[[1]])[c(-1,-44)] = namecode$name[which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44))]]
# Replace a data.frame coded gene to real gene name
names(drugresults[[1]])[c(-1,-44)] = namecode$name[which(namecode$Code %in% names(drugresults[[1]])[c(-1,-44)])]
names(drugresults[[1]])[c(-1,-44)]
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
names(fulldf[c(-1,-44)]) = namecode$name[which(namecode$Code %in% names(fulldf)[c(-1,-44)])]
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
str(drugresults)
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
names(fulldf[c(-1,-44)]) = namecode$name[which(namecode$Code %in% names(fulldf)[c(-1,-44)])]
str(fulldf)
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
print(namecode$name[which(namecode$Code %in% names(fulldf)[c(-1,-44)])])
names(fulldf[c(-1,-44)]) = namecode$name[which(namecode$Code %in% names(fulldf)[c(-1,-44)])]
str(fulldf)
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
# In Old: 83 number is the issue.
# which(targetdrugs %in% c("245", "256", "284", "303", "406", "409", "415"))
drugresults = pbapply::pblapply(targetdrugs[which(targetdrugs %in% c("415"))], function(x){
print(x)
# Combine df
outdf = final_out[final_out$DRUG_ID == x, c("model_id", "IC50_PUBLISHED")]
fulldf = merge(missdf,outdf, id.vars = "model_id", all.x = T)
# str(fulldf)
# print(c(nrow(fulldf), ncol(fulldf)))
print(namecode$name[which(namecode$Code %in% names(fulldf)[c(-1,-44)])])
names(fulldf)[c(-1,-44)] = namecode$name[which(namecode$Code %in% names(fulldf)[c(-1,-44)])]
str(fulldf)
write.csv(fulldf, "genomic.csv")
# Remove incomplete rows
compdf = fulldf[complete.cases(fulldf),]
# str(compdf)
# print(c(nrow(corrdf), ncol(corrdf)))
# Run One round of Incomplete
# df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = 1)
# in_res = modelfit(dataset = df, seedrun = 1, analysis = c("incomplete"))
# print(in_res)
# in_perf = in_res$Approach[order(in_res$MSE)][1:3] %in% "beta_Prop"
# if(any(in_perf)){
#   both_res = modelfit(dataset = df, seedrun = 1, analysis = c("both"))
#   # print(both_res)
#   both_perf = both_res$Approach[order(both_res$MSE)][1:3] %in% "beta_Prop"
# }
# else{both_perf = F}
# both_perf = T; in_perf = T
# if(any(in_perf) & any(both_perf)){
#   res = lapply(1:5, function(seed){
#   df = createdataset(df=compdf, max_miss = 0.3, excludevar = "model_id", outvar = "IC50_PUBLISHED", testtrainsplit = 0.2, seed = seed)
#   in_res = modelfit(dataset = df, seedrun = seed, analysis = c("incomplete"))
#   # print(seed)
#   both_res = modelfit(dataset = df, seedrun = seed, analysis = c("both"))
#   # print(both_res)
#   res = rbind(in_res, both_res)
#   res
# })
# }
# else if(any(in_perf)) {res = list(rbind(in_res, both_res))}
# else{res = list(in_res)}
#
# # print(res)
# performance_df=do.call(rbind, res)
# p100df_m = dmusummarizer(x = performance_df, meancontrol = T)
# # drresult_list[[x]] <<- p100df_m
# p100df_m
})
## Run simulated data
#for p=35
performance_35=lapply(1:1, function(seed_run) {
varnum=35; miss=0.8;correlation=0.5; tr_multi=90; sample_to_featureratio=2
Incomplete
incomplete_feature= list(varnum=varnum,
miss=miss,
correlation=correlation,
seed=seed_run,
tr_multi=tr_multi,
sample_clustersize = NA,
sample_to_featureratio=sample_to_featureratio,
datatype="incomplete")
# DMU optimization
clustersize = hyper_para_optim_sim_old(x = incomplete_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1000, Missingdata = T)
# print(clustersize)
# clustersize= 418
incomplete_feature= list(varnum=varnum,miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = clustersize, sample_to_featureratio=sample_to_featureratio, datatype="incomplete")
## Results
incomplete_res = sim_fit_old(x = incomplete_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1000, Missingdata = T, technique= c("reg","mice","DMU","rf", "mean"))
# print(incomplete_res)
# Both
both_feature= list(varnum=varnum, miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = NA, sample_to_featureratio=sample_to_featureratio, datatype="both")
## DMU optimization
clustersize = hyper_para_optim_sim_old(x = both_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1050, Missingdata = T)
# print(clustersize)
both_feature= list(varnum=varnum, miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = clustersize, sample_to_featureratio=sample_to_featureratio, datatype="both")
## Results
both_res = sim_fit_old(x = both_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1050, Missingdata = T, technique= c("reg","mice","DMU"))
# print(both_res)
finalres=rbind(incomplete_res,both_res)
# print(finalres)
finalres
})
devtools::document()
# Artificial Data
# p = 20, old
performance_20= pbapply::pblapply(1:1, function(seed_run) {
varnum=20; miss=0.8; correlation=0.5; tr_multi=157.5; sample_to_featureratio=2
# # Incomplete
# incomplete_feature= list(varnum=varnum,
#                          miss=miss,
#                          correlation=correlation,
#                          seed=seed_run,
#                          tr_multi=tr_multi,
#                          sample_clustersize = NA,
#                          sample_to_featureratio=sample_to_featureratio,
#                          datatype="incomplete")
#
# test_size = 1000
# dataset = DMU:::data_sim(varnum, maxmiss_per=miss, corr_seed=seed_run, testsize = test_size,
#                          samplesize=((varnum*tr_multi)+test_size), effect="Mar", max_corr= correlation, high_dim = F)
# # Create data split for DMU
# traindata = dataset$train
# testdata = dataset$test
# truetrain = dataset$truedata
# # str(testdata[,1:3])
#
# # DMU optimization
# future::plan(future::multisession(workers = 10))
# clustersize =DMU_lite::hyperpara_optimize(optimtype = "hpo_sup_simdata_ds", varnum=varnum, seed=seed_run, tr_multi=tr_multi, traindata= traindata, testdata = testdata, splitype = "old")
# # print(clustersize)
# # clustersize= 228
# incomplete_feature= list(varnum=varnum,miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = clustersize, sample_to_featureratio=sample_to_featureratio, datatype="incomplete")
# ## Results
# incomplete_res = DMU_lite::sim_fit_old(x = incomplete_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1000, Missingdata = T, traindata= traindata, testdata = testdata, truetrain = truetrain, technique= c("DMU", "knn", "mice", "reg", "mean", "rf"), splitype = "old")#
# print(incomplete_res)
# Both
both_feature= list(varnum=varnum, miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = NA, sample_to_featureratio=sample_to_featureratio, datatype="both")
test_size = 1050
dataset = DMU_lite:::data_sim(varnum, maxmiss_per=miss, corr_seed=seed_run, testsize = test_size,
samplesize=((varnum*tr_multi)+test_size), effect="Mar", max_corr= correlation, high_dim = F)
# Create data split for DMU
traindata = dataset$train
testdata = dataset$test
truetrain = dataset$truedata
## DMU optimization
# clustersize = DMU::hyperpara_optimize(optimtype = "hpo_sup_simdata_ds", varnum=varnum, seed=seed_run, tr_multi=tr_multi, test_size=1050,  traindata= traindata, testdata = testdata, datatype = "both", splitype = "old")
# print(clustersize)
clustersize= 4
both_feature= list(varnum=varnum, miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = clustersize, sample_to_featureratio=sample_to_featureratio, datatype="both")
## Results
both_res = DMU_lite::sim_fit_old(x = both_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1050, Missingdata = T, traindata= traindata, testdata = testdata, truetrain = truetrain, technique= c("DMU", "knn", "mice", "reg","mean"), splitype = "old") #, "rf"
both_res$traindata = "both"
# print(both_res)
finalres = both_res
# finalres=rbind(incomplete_res,both_res)
# # print(finalres)
# finalres
# return(finalres)
})
devtools::document()
# Artificial Data
# p = 20, old
performance_20= pbapply::pblapply(1:1, function(seed_run) {
varnum=20; miss=0.8; correlation=0.5; tr_multi=157.5; sample_to_featureratio=2
# # Incomplete
# incomplete_feature= list(varnum=varnum,
#                          miss=miss,
#                          correlation=correlation,
#                          seed=seed_run,
#                          tr_multi=tr_multi,
#                          sample_clustersize = NA,
#                          sample_to_featureratio=sample_to_featureratio,
#                          datatype="incomplete")
#
# test_size = 1000
# dataset = DMU:::data_sim(varnum, maxmiss_per=miss, corr_seed=seed_run, testsize = test_size,
#                          samplesize=((varnum*tr_multi)+test_size), effect="Mar", max_corr= correlation, high_dim = F)
# # Create data split for DMU
# traindata = dataset$train
# testdata = dataset$test
# truetrain = dataset$truedata
# # str(testdata[,1:3])
#
# # DMU optimization
# future::plan(future::multisession(workers = 10))
# clustersize =DMU_lite::hyperpara_optimize(optimtype = "hpo_sup_simdata_ds", varnum=varnum, seed=seed_run, tr_multi=tr_multi, traindata= traindata, testdata = testdata, splitype = "old")
# # print(clustersize)
# # clustersize= 228
# incomplete_feature= list(varnum=varnum,miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = clustersize, sample_to_featureratio=sample_to_featureratio, datatype="incomplete")
# ## Results
# incomplete_res = DMU_lite::sim_fit_old(x = incomplete_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1000, Missingdata = T, traindata= traindata, testdata = testdata, truetrain = truetrain, technique= c("DMU", "knn", "mice", "reg", "mean", "rf"), splitype = "old")#
# print(incomplete_res)
# Both
both_feature= list(varnum=varnum, miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = NA, sample_to_featureratio=sample_to_featureratio, datatype="both")
test_size = 1050
dataset = DMU_lite:::data_sim(varnum, maxmiss_per=miss, corr_seed=seed_run, testsize = test_size,
samplesize=((varnum*tr_multi)+test_size), effect="Mar", max_corr= correlation, high_dim = F)
# Create data split for DMU
traindata = dataset$train
testdata = dataset$test
truetrain = dataset$truedata
## DMU optimization
# clustersize = DMU::hyperpara_optimize(optimtype = "hpo_sup_simdata_ds", varnum=varnum, seed=seed_run, tr_multi=tr_multi, test_size=1050,  traindata= traindata, testdata = testdata, datatype = "both", splitype = "old")
# print(clustersize)
clustersize= 4
both_feature= list(varnum=varnum, miss=miss, correlation=correlation, seed=seed_run, tr_multi=tr_multi, sample_clustersize = clustersize, sample_to_featureratio=sample_to_featureratio, datatype="both")
## Results
both_res = DMU_lite::sim_fit_old(x = both_feature, setting="Correlation", var="Mar", main_var=10, var_effect=0.5, correlation_var=15, high_dim=T, test_size=1050, Missingdata = T, traindata= traindata, testdata = testdata, truetrain = truetrain, technique= c("DMU", "knn", "mice", "reg","mean"), splitype = "old") #, "rf"
both_res$traindata = "both"
# print(both_res)
finalres = both_res
# finalres=rbind(incomplete_res,both_res)
# # print(finalres)
# finalres
# return(finalres)
})
devtools::document()
devtools::document()
devtools::document()
